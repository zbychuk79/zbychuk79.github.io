<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zbychuk79.github.io HomePage</title>
    <link>https://zbychuk79.github.io/</link>
    <description>Recent content on zbychuk79.github.io HomePage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 07 May 2020 18:55:43 +0200</lastBuildDate>
    
	<atom:link href="https://zbychuk79.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Domoticz</title>
      <link>https://zbychuk79.github.io/posts/domoticz/</link>
      <pubDate>Thu, 07 May 2020 18:55:43 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/domoticz/</guid>
      <description>Od około września 2018 roku mam na jednym z moich Raspberry Pi uruchomiony system automatyki domowej Domoticz. Mam w planie mieć go uruchomionego pod Docker-em na moim serwerze &amp;ldquo;omv1&amp;rdquo; (Odroid HC1).
Na samym początku miałem tylko podłączone 6 czujników temperatury DS18B20 na jednym długim kablu wielożyłowym. Teraz na tym kablu mam ich 5 sztuk:
 korytarz w piwnicy pokój gościnny na parterze pokój na piętrze, gdzie śpię poddasze na dworze pod dachem od północnej strony  Jeszcze zanim zainstalowałem Domoticz-a, to miałem ustawione monitorowanie tych czujników przy pomocy skryptu, który generował wykresy czasowe przy pomocy programu rrdtool.</description>
    </item>
    
    <item>
      <title>Skaner książek</title>
      <link>https://zbychuk79.github.io/posts/book-scanner/</link>
      <pubDate>Fri, 01 May 2020 16:01:49 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/book-scanner/</guid>
      <description>W roku 2019 postanowiłem zbudować sobie skaner książek, działający na zasadzie użycia cyfrowego aparatu fotograficznego jako urządzenia skanującego.
W pierwotnej wersji zbudowałem dość duże urządzenie, do którego mogę podpiąć jedną z moich lustrzanek cyfrowych Nikon D70s lub Nikon D7100.
Na górnym ramieniu całej konstrukcji miałem zamontowaną lampę LED o mocy ok. 30W. Jest ona dość mocna, więc na fotografowany materiał docierało wystarczająco dużo światła.
Ogólnie rzecz biorąc, to dało się używać tej konstrukcji, ale nie miałem w niej żadnego mechanizmu podpierającego książkę.</description>
    </item>
    
    <item>
      <title>System ratunkowy Debian</title>
      <link>https://zbychuk79.github.io/posts/system-ratunkowy/</link>
      <pubDate>Thu, 30 Apr 2020 11:29:03 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/system-ratunkowy/</guid>
      <description>Przedstawię tu opis generowania obrazu systemu ratunkowego, który będzie można zapisać na Pendrive i używać jako systemu LiveUSB.
Czynności będę przeprowadzał na pełnym systemie Debian (pod VirtualBox-em), ponieważ nie udało mi się poprawnie uruchomić programu debootstick pod Docker-em.
Napisałem prosty skrypt o nazwie deb-rescue
Wymaga on do działania zainstalowanych paczek:
 git debootstrap debootstick ew. programu telegram-send z repozytoriów python3-pip  Po wejściu do wygenerowanego katalogu chroot, trzeba wykonać skrypt /install_script.</description>
    </item>
    
    <item>
      <title>Qmapshack</title>
      <link>https://zbychuk79.github.io/posts/qmapshack/</link>
      <pubDate>Mon, 27 Apr 2020 12:32:23 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/qmapshack/</guid>
      <description> Kurs wideo na temat programu QmapShack:  część 1     część 2     część 3     część 4    </description>
    </item>
    
    <item>
      <title>Garmin GPS</title>
      <link>https://zbychuk79.github.io/posts/gps/</link>
      <pubDate>Sun, 26 Apr 2020 09:24:34 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/gps/</guid>
      <description>Za jakiś czas przebuduję ten artykuł. Teraz mam to ustawione inaczej i na innym serwerze.
 Posiadam odbiornik GPSMap 76CSx firmy Garmin z dodatkowym uchwytem na rower. Wraz z odbiornikiem zakupiłem GPMapa 2007, ale dodatkowych aktualizacji już nie kupowałem.
Darmowe mapy do Garmin GPSMap 76CSx. Miałem załadowaną do niego mapę UMP-PL TOPO. Mapa ta nadawała się doskonale do jazdy na rowerze, po wcześniejszym załadowaniu trasy. Powodem tego jest to, że posiada zaznaczone dużo obiektów i szlaków, których próżno szukać na innych mapach oraz to, że uaktualniana jest prawie codziennie.</description>
    </item>
    
    <item>
      <title>FreeNAS</title>
      <link>https://zbychuk79.github.io/posts/freenas/</link>
      <pubDate>Sat, 25 Apr 2020 16:04:22 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/freenas/</guid>
      <description>Artukuł ten jest dość stary i mam zamiar go w niedługim czasie uaktualnić.
 Prawie 10 lat temu (był chyba rok 2011) postanowiłem zbudować sobie serwer w celu trzymania na nim kopii zapasowych moich danych. Jego przeznaczeniem nigdy nie było działanie 24/7.
Pierwotnie serwerem był:
 MB: ASRock A330ION CPU: 2-rdzeniowy 1.6 GHz RAM: 2x 1 GB HDD&amp;rsquo;s: 6x 640 GB, co daje 2.4631 TB lub 2.2402 TiB miejsca na dane  Później (chyba rok 2013) zmieniłem serwer na mocniejszy:</description>
    </item>
    
    <item>
      <title>OpenWRT Image Builder</title>
      <link>https://zbychuk79.github.io/posts/openwrt/</link>
      <pubDate>Wed, 22 Apr 2020 14:35:28 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/openwrt/</guid>
      <description> Ustawienie OpenWRT Image Builder Napisałem skrypt, który uruchamiam pod systemem Debian 10 “Buster”. Jego zadaniem jest generowanie obrazu firmware dla moich punktów WiFi AP.
W moim przypadku działa on pod VM (lub w kontenerze Docker-a) z systemem Debian 10 “Buster”.
Skrypt ten zapisałem jako wrt. Dodatkowe pliki konfiguracyjne dla moich urządzeń są tu. Są one automatycznie pobierane przez mój skrypt.
 Przydatne linki na powyższy temat:
 lede-project.org dc502wrt.org - Firmware, jaki mam w moim routerze  </description>
    </item>
    
    <item>
      <title>Docker - debian-wrt image</title>
      <link>https://zbychuk79.github.io/posts/docker-wrt/</link>
      <pubDate>Tue, 21 Apr 2020 19:24:00 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/docker-wrt/</guid>
      <description>Przedstawię teraz jak utworzyć środowisko przydatne do generowania obrazów firmware OpenWRT dla moich punktów WiFi działających na SBC Raspberry Pi. Pozwala ono również na kompilowanie własnej wersji iPXE.
Najpierw pobieramy potrzebne nam pliki:
git clone https://github.com/zbychuk79/docker-wrt.git  W katalogu docker-wrt mamy następujące pliki:
 Dockerfile - plik sterujący dla Docker&amp;lsquo;a wrt_script - uruchamiany podczas tworzenia obrazu docker-build-wrt-image - generowanie obrazu Debian&amp;lsquo;a z potrzebnymi programami i ustawieniami docker-wrt-container - utworzenie kontenera na podstawie wygenerowanego wcześniej obrazu docker-wrt-bash - uruchomienie bash w naszym nowym kontenerze  Po uruchomieniu ostatnich trzech skryptów, można wykonywać polecenia w naszym nowym kontenerze.</description>
    </item>
    
    <item>
      <title>iPXE w mojej sieci LAN</title>
      <link>https://zbychuk79.github.io/posts/ipxe/</link>
      <pubDate>Tue, 21 Apr 2020 17:56:50 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/ipxe/</guid>
      <description>W tym miejscu opiszę jak można ustawić proste (lub też bardzo rozbudowane) środowisko do startowania systemu operacyjnego lub jego instalatora bez pobierania z Internetu dużego pliku nośnika startowego typu CD-Rom lub Pendrive.
Przedstawię jak skompilować własną wersję iPXE.
 Najpierw przygotuję system Debian, gdzie będę przeprowadzał całą procedurę.
Zrobiłem to pod VirtualBox dlatego, że jest mi tym sposobem łatwiej (czynności te zadziałają też w kontenerze Docker-a). System host&amp;rsquo;a to ArchLinux, który działa dobrze, ale prościej mi się pod Debian&amp;lsquo;em to ustawia i łatwiej jest wyłapać błędy na prawie gołym systemie.</description>
    </item>
    
    <item>
      <title>Moje klucze publiczne GnuPG</title>
      <link>https://zbychuk79.github.io/posts/gnupg/</link>
      <pubDate>Tue, 21 Apr 2020 16:49:35 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/gnupg/</guid>
      <description>Ostatnio (2019.09.24) przeczytałem kilka artykułów na temat bezpieczeństwa kluczy szyfrujących:
 OpenPGP - The almost perfect key pair OpenPGP Best Practices - riseup.net How to rotate your OpenPGP / GnuPG keys - GeekWare Generating More Secure GPG Keys: A Step-by-Step Guide   Podpisywanie kluczy Key Signing Party   Serwer kluczy keys.openpgp.org  No i stwierdziłem, że trzeba utworzyć nową parę kluczy, a stare unieważnić.
Jeśli chcesz wysłać mi wiadomość, to poniżej są informacje na temat moich kluczy publicznych dla programu GnuPG.</description>
    </item>
    
    <item>
      <title>O mnie</title>
      <link>https://zbychuk79.github.io/posts/omnie/</link>
      <pubDate>Tue, 21 Apr 2020 16:49:35 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/omnie/</guid>
      <description>Moje zainteresowania to:
 IT  Komputery Sieci komputerowe Informatyka Automatyka domowa   Fotografia cyfrowa Jazda na rowerze Wędrówki po polskich lasach i górach Trening siłowy  Ta strona jest miejscem, gdzie rozpisuję się na różne tematy, które mnie interesują.
 Większość mniejszych plików umieszczam na moim koncie na github.com/zbychuk79.
Większe pliki z mojej strony będą udostępnione na specjalnie do tego przeznaczonym publicznym kanale w sieci Telegram.
Dyskusja na temat tej strony internetowej możliwa jest na odpowiednim forum w sieci Telegram.</description>
    </item>
    
  </channel>
</rss>