<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zbychuk&#39;s HomePage</title>
    <link>https://zbychuk79.github.io/</link>
    <description>Recent content on Zbychuk&#39;s HomePage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl-PL</language>
    <lastBuildDate>Thu, 24 Mar 2022 10:17:04 +0100</lastBuildDate><atom:link href="https://zbychuk79.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MathJax na stronie generowanej przez Hugo</title>
      <link>https://zbychuk79.github.io/posts/mathjax/</link>
      <pubDate>Thu, 24 Mar 2022 10:17:04 +0100</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/mathjax/</guid>
      <description>Używam biblioteki JavaScript o nazwie MathJax do renderowania wyrażeń matematycznych na mojej stronie internetowej.
Linki:
MathJax Render LaTeX math expressions in Hugo with MathJax 3 Normalne wzory matematyczne:
Jedynka trygonometryczna: $$sin^2{α}+cos^2{α}=1$$
Wzory na tangens i cotangens: $$tg{α}=\frac{sin{α}}{cos{α}}$$ $$ctg{α}=\frac{cos{α}}{sin{α}}$$ $$tg{α}⋅ctg{α}=1$$
Funkcje trygonometryczne podwojonego kąta: $$sin{(2 \alpha)}=2 sin{(\alpha)}cos{(\alpha)}=2\frac{tg(\alpha)}{tg^2(\alpha)}$$ $$cos{(2\alpha)}=cos{(2\alpha)}−sin{(2\alpha)}=2cos{(2\alpha)}−1$$ $$tg{(2\alpha)}=\frac{2tg{(\alpha)}}{1−tg^2(\alpha)}=\frac{2}{ctg{(\alpha)}−tg{(\alpha)}}$$ $$ctg{(2\alpha)}=\frac{ctg^2{(\alpha)}−1}{2 ctg{(\alpha)}}=\frac{ctg{(\alpha)}−tg{(\alpha)}}{2}$$
Pojemność cylindra (styl display):
$$V = \pi r^2 h$$
Pojemność cylindra (styl inline): $V = \pi r^2 h$</description>
    </item>
    
    <item>
      <title>Skaner książek</title>
      <link>https://zbychuk79.github.io/posts/book-scanner/</link>
      <pubDate>Wed, 23 Mar 2022 14:33:00 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/book-scanner/</guid>
      <description>W roku 2019 postanowiłem zbudować sobie skaner książek, działający na zasadzie użycia cyfrowego aparatu fotograficznego jako urządzenia skanującego.
W pierwotnej wersji zbudowałem dość duże urządzenie, do którego mogę podpiąć jedną z moich lustrzanek cyfrowych Nikon D70s lub Nikon D7100.
Na górnym ramieniu całej konstrukcji miałem zamontowaną lampę LED o mocy ok. 30W. Jest ona dość mocna, więc na fotografowany materiał docierało wystarczająco dużo światła.
Ogólnie rzecz biorąc, to dało się używać tej konstrukcji, ale nie miałem w niej żadnego mechanizmu podpierającego książkę.</description>
    </item>
    
    <item>
      <title>Drukarka 3D - Original Prusa i3 MK3S&#43;</title>
      <link>https://zbychuk79.github.io/posts/drukarka3d/</link>
      <pubDate>Wed, 23 Mar 2022 14:12:18 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/drukarka3d/</guid>
      <description>22 marca 2021.
W końcu zdecydowałem się na zakup drukarki 3D. Dość długo się zastanawiałem jaką wybrać.
Kolega z pracy ma drukarkę Anet A8-B. Dał za nią $110. Muszę powiedzieć, że jak wydrukował mi na niej jeden element do mojego skanera książek, to wyszło mu to lepiej niż innym ludziom z pracy, którzy mieli do dyspozycji drukarkę za 12500 złotych (chyba mają ją uszkodzoną, albo nie wiedzą jak jej używać).</description>
    </item>
    
    <item>
      <title>Monero daemon w mojej sieci LAN</title>
      <link>https://zbychuk79.github.io/posts/monero/</link>
      <pubDate>Tue, 22 Feb 2022 21:32:00 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/monero/</guid>
      <description>Informacje na temat kryptowaluty Monero:
Monero Means Money - Główna strona projektu W pierwszej kolejności uruchomiłem wersję z interfejsem graficznym na moim głównym komputerze.
Pobrałem monero-gui-v0.17.3.1 i uruchomiłem monero-wallet-gui.
Ustawiłem go aby działał w trybie expert. Spowoduje to pobranie całego łańcucha blockchain (trwało to dość długo). Teraz zajmuje on na dysku 133GB. Został on zapisany w katalogu ~/.bitmonero, który po zamknięciu programu skopiuję na mój serwer Raspberry Pi.
Chcę zapisać ten blockchain na moim Raspberry Pi, aby mieć do niego dostęp na moim laptopie i nie zajmować większości dostępnej przestrzeni na dysku.</description>
    </item>
    
    <item>
      <title>Węzeł IPFS w mojej sieci LAN</title>
      <link>https://zbychuk79.github.io/posts/ipfs/</link>
      <pubDate>Sun, 20 Feb 2022 15:26:00 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/ipfs/</guid>
      <description>Informacje na temat IPFS:
ipfs.io - Główna strona projektu To jest tylko mały indeks z linkami stron, które umieściłem w sieci IPFS.
Galeria zdjęć Kilka moich plików DJVU Oto czynności, które wykonałem aby uruchomić węzeł IPFS na moim Raspberry Pi.
Plik binarny ipfs przeznaczony dla Raspberry Pi zapisałem do katalogu /usr/local/binz/.
W pierwszej kolejności uruchomiłem ipfs ręcznie z konta użytkownika pi.
ipfs Potem w pliku konfiguracyjnym ustawiłem, żeby ipfs nie działał tylko na adresie 127.</description>
    </item>
    
    <item>
      <title>Serwer NAS</title>
      <link>https://zbychuk79.github.io/posts/freenas/</link>
      <pubDate>Wed, 09 Feb 2022 17:01:22 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/freenas/</guid>
      <description>Prawie 10 lat temu (był chyba rok 2011) postanowiłem zbudować sobie serwer w celu trzymania na nim kopii zapasowych moich danych. Jego przeznaczeniem nigdy nie było działanie 24/7.
Pierwotnie serwerem był:
MB: ASRock A330ION CPU: 2-rdzeniowy 1.6 GHz RAM: 2x 1 GB HDD&amp;rsquo;s: 6x 640 GB, co daje 2.4631 TB lub 2.2402 TiB miejsca na dane Później (chyba rok 2013) zmieniłem serwer na mocniejszy:
MB: Asus P5E CPU: Q6600 RAM: 4x 2 GB DDR2 HDD&amp;rsquo;s: zmieniłem na dyski o pojemności 2 TB Macierz dyskowa w tym momencie składa się z 6-ciu dysków WD Green 2 TB, co daje łącznie 8 TB lub 7.</description>
    </item>
    
    <item>
      <title>Moje klucze publiczne GnuPG</title>
      <link>https://zbychuk79.github.io/posts/gnupg/</link>
      <pubDate>Sat, 22 Jan 2022 15:02:00 +0100</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/gnupg/</guid>
      <description>Jakiś czas temu (2019.09.24) przeczytałem kilka artykułów na temat bezpieczeństwa kluczy szyfrujących:
OpenPGP - The almost perfect key pair OpenPGP Best Practices - riseup.net How to rotate your OpenPGP / GnuPG keys - GeekWare Generating More Secure GPG Keys: A Step-by-Step Guide Podpisywanie kluczy Key Signing Party Serwer kluczy keys.openpgp.org No i stwierdziłem, że trzeba utworzyć nową parę kluczy, a stare unieważnić.
Pomocne informacje:
Kernel Maintainer PGP guide Protecting code integrity with PGP Generate GPG Keys With Curve Ed25519 Maintaining Your Keypair and the Web Of Trust PGP Key Signing Party How to Roll a Strong Password with 20-Sided Dice and Fandom-Inspired Wordlists GnuPG cheatsheet GnuPG FAQ Generator wizytówek GnuPG Jeśli chcesz wysłać mi wiadomość, to poniżej są moje klucze publiczne dla programu GnuPG.</description>
    </item>
    
    <item>
      <title>System ratunkowy Debian</title>
      <link>https://zbychuk79.github.io/posts/system-ratunkowy/</link>
      <pubDate>Wed, 01 Dec 2021 05:41:03 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/system-ratunkowy/</guid>
      <description>Przedstawię tu opis generowania obrazu systemu ratunkowego, który będzie można zapisać na Pendrive i używać jako systemu ratunkowego LiveUSB.
Czynności będę wykonywał w systemie Debian (pod VirtualBox-em), ponieważ nie udało mi się poprawnie uruchomić programu debootstick pod Docker-em.
Napisałem prosty skrypt o nazwie rescue.
#!/bin/bash # Skrypt generuje środowisko chroot z Debianem. # Generuje skrypty do wykonania pod chroot instalujące i # ustawiające potrzebne oprogramowanie. # Potem można wygenerować image systemu do nagrania na pendrive.</description>
    </item>
    
    <item>
      <title>Asciinema</title>
      <link>https://zbychuk79.github.io/posts/asciinema/</link>
      <pubDate>Sun, 21 Feb 2021 04:35:28 +0100</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/asciinema/</guid>
      <description> Asciinema to bardzo przydatny program do nagrywania sesji terminalowej.
Linki:
How asciinema works Embedding asciinema cast in your hugo site </description>
    </item>
    
    <item>
      <title>Docker - debian-wrt image</title>
      <link>https://zbychuk79.github.io/posts/docker-wrt/</link>
      <pubDate>Sat, 20 Feb 2021 13:00:00 +0100</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/docker-wrt/</guid>
      <description>Przedstawię teraz jak utworzyć środowisko przydatne do generowania obrazów firmware OpenWRT dla moich punktów WiFi działających na SBC Raspberry Pi. Pozwala ono również na kompilowanie własnej wersji iPXE.
Najpierw pobieramy potrzebne nam pliki:
git clone https://github.com/zbychuk79/docker-wrt.git W katalogu docker-wrt mamy następujące pliki:
Dockerfile - plik sterujący dla Docker&amp;lsquo;a wrt_script - uruchamiany podczas tworzenia obrazu docker-image - generowanie obrazu Debian&amp;lsquo;a z potrzebnymi programami i ustawieniami docker-container - utworzenie kontenera na podstawie wygenerowanego wcześniej obrazu docker-bash - uruchomienie bash w naszym nowym kontenerze Po uruchomieniu ostatnich trzech skryptów, można wykonywać polecenia w naszym nowym kontenerze.</description>
    </item>
    
    <item>
      <title>Wireguard</title>
      <link>https://zbychuk79.github.io/posts/wireguard/</link>
      <pubDate>Fri, 12 Jun 2020 12:24:21 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/wireguard/</guid>
      <description>2020.06.12.
Udało mi się dzisiaj uruchomić serwer VPN WireGuard pod Docker-em na Raspberry Pi 4.
Mam na tym urządzeniu zainstalowany OpenMediaVault 5 na 32-bitowym systemie RaspiOS Lite. Do tego jeszcze mam tam zainstalowany kontener Portainer do zarządzania Docker-em.
Posłużyłem się dokumentacją na stronie kontenera linuxserver/wireguard.
Poniżej jest mój skrypt, który tworzy kontener na podstawie powyższego Image:
#!/bin/sh docker create \ --name=wireguard \ --cap-add=NET_ADMIN \ --cap-add=SYS_MODULE \ -e PUID=1000 \ -e PGID=1000 \ -e TZ=Europe/Warsaw \ -e SERVERURL=zbychuk.</description>
    </item>
    
    <item>
      <title>Domoticz</title>
      <link>https://zbychuk79.github.io/posts/domoticz/</link>
      <pubDate>Thu, 07 May 2020 18:55:43 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/domoticz/</guid>
      <description>Od około września 2018 roku mam na jednym z moich Raspberry Pi uruchomiony system automatyki domowej Domoticz. Mam w planie mieć go uruchomionego pod Docker-em na moim serwerze &amp;ldquo;omv1&amp;rdquo; (Odroid HC1).
Na samym początku miałem tylko podłączone 6 czujników temperatury DS18B20 na jednym długim kablu wielożyłowym. Teraz na tym kablu mam ich 5 sztuk:
korytarz w piwnicy pokój gościnny na parterze pokój na piętrze, gdzie śpię poddasze na dworze pod dachem od północnej strony Jeszcze zanim zainstalowałem Domoticz-a, to miałem ustawione monitorowanie tych czujników przy pomocy skryptu, który generował wykresy czasowe przy pomocy programu rrdtool.</description>
    </item>
    
    <item>
      <title>Qmapshack</title>
      <link>https://zbychuk79.github.io/posts/qmapshack/</link>
      <pubDate>Mon, 27 Apr 2020 12:32:23 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/qmapshack/</guid>
      <description> Kurs wideo na temat programu QmapShack: część 1 część 2 część 3 część 4 </description>
    </item>
    
    <item>
      <title>Garmin GPS</title>
      <link>https://zbychuk79.github.io/posts/gps/</link>
      <pubDate>Sun, 26 Apr 2020 09:24:34 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/gps/</guid>
      <description>Posiadam odbiornik GPSMap 76CSx firmy Garmin z dodatkowym uchwytem na rower. Wraz z odbiornikiem zakupiłem GPMapa 2007, ale dodatkowych aktualizacji już nie kupowałem.
Darmowe mapy do Garmin GPSMap 76CSx. Miałem załadowaną do niego mapę UMP-PL TOPO. Mapa ta nadawała się doskonale do jazdy na rowerze, po wcześniejszym załadowaniu trasy. Powodem tego jest to, że posiada zaznaczone dużo obiektów i szlaków, których próżno szukać na innych mapach oraz to, że uaktualniana jest prawie codziennie.</description>
    </item>
    
    <item>
      <title>OpenWRT Image Builder</title>
      <link>https://zbychuk79.github.io/posts/openwrt/</link>
      <pubDate>Wed, 22 Apr 2020 14:35:28 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/openwrt/</guid>
      <description>Ustawienie OpenWRT Image Builder Napisałem skrypt, który uruchamiam pod systemem Debian 10 “Buster”. Jego zadaniem jest generowanie obrazu firmware dla moich punktów WiFi AP.
W moim przypadku działa on pod VM (lub w kontenerze Docker-a) z systemem Debian 10 “Buster”.
Skrypt ten zapisałem jako wrt. Dodatkowe pliki konfiguracyjne dla moich urządzeń są tu. Są one automatycznie pobierane przez mój skrypt.
#!/bin/bash # Wersja RPi dla generowanego obrazu. # rpi=&amp;#34;bcm2708&amp;#34; wersja=&amp;#34;21.</description>
    </item>
    
    <item>
      <title>iPXE w mojej sieci LAN</title>
      <link>https://zbychuk79.github.io/posts/ipxe/</link>
      <pubDate>Tue, 21 Apr 2020 17:56:50 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/ipxe/</guid>
      <description>W tym miejscu opiszę jak można ustawić proste (lub też bardzo rozbudowane) środowisko do startowania systemu operacyjnego lub jego instalatora bez pobierania z Internetu dużego pliku nośnika startowego typu CD-Rom lub Pendrive.
Przedstawię jak skompilować własną wersję iPXE.
Najpierw przygotuję system Debian, gdzie będę przeprowadzał całą procedurę.
Zrobiłem to pod VirtualBox dlatego, że jest mi tym sposobem łatwiej (czynności te zadziałają też w kontenerze Docker-a). System host&amp;rsquo;a to ArchLinux, który działa dobrze, ale prościej mi się pod Debian&amp;rsquo;em to ustawia i łatwiej jest wyłapać błędy na prawie gołym systemie.</description>
    </item>
    
    <item>
      <title>O mnie</title>
      <link>https://zbychuk79.github.io/posts/omnie/</link>
      <pubDate>Tue, 21 Apr 2020 16:49:35 +0200</pubDate>
      
      <guid>https://zbychuk79.github.io/posts/omnie/</guid>
      <description>Moje zainteresowania to:
IT Komputery Sieci komputerowe Automatyka domowa Druk 3D Fotografia cyfrowa Jazda na rowerze Wędrówki po polskich lasach i górach Trening siłowy Ta strona jest miejscem, gdzie rozpisuję się na różne tematy, które mnie interesują.
Większość mniejszych plików umieszczam na moim koncie na github.com/zbychuk79.
Większe pliki będą udostępniane na specjalnie do tego przeznaczonym publicznym kanale w sieci Telegram lub w sieci Bittorrent.
Dyskusja na temat tej strony internetowej możliwa jest na odpowiednim forum w sieci Telegram.</description>
    </item>
    
  </channel>
</rss>
